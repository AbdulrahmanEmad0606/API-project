{
	"info": {
		"_postman_id": "708369ce-800b-43e4-a3b5-4fd0320434ab",
		"name": "fakerestapi.azurewebsites",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "23975946",
		"_collection_link": "https://www.postman.com/planetary-star-118704/workspace/api-course/collection/23975946-708369ce-800b-43e4-a3b5-4fd0320434ab?action=share&source=collection_link&creator=23975946"
	},
	"item": [
		{
			"name": "Authors",
			"item": [
				{
					"name": "Get Authors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be 200 OK\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
									"});\r",
									"\r",
									"let myResponse = pm.response.json()[0];\r",
									"\r",
									"// check that test Objects inside response contain id, idBook, firstName, lastName\r",
									"pm.test(\"Check that the response contains id, idBook, firstName, lastName.\", function () {\r",
									"    pm.expect(myResponse.hasOwnProperty(\"id\")).to.equal(true);\r",
									"    pm.expect(myResponse.hasOwnProperty(\"idBook\")).to.equal(true);\r",
									"    pm.expect(myResponse.hasOwnProperty(\"firstName\")).to.equal(true);\r",
									"    pm.expect(myResponse.hasOwnProperty(\"lastName\")).to.equal(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/Authors"
					},
					"response": []
				},
				{
					"name": "create author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check that the Author can register successfully and response code 200 Created\",function(){\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    pm.expect(pm.response.status).to.equal(\"OK\")\r",
									"})\r",
									"\r",
									"// check that the firstname & lastname should be mandatory\r",
									"let myResponse = pm.response.json();\r",
									"pm.test(\"check that the firstname & lastname should be mandatory\",function(){\r",
									"   pm.expect(myResponse.firstName).to.not.oneOf([\"\",\" \"]);\r",
									"   pm.expect(myResponse.lastName).to.not.oneOf([\"\",\" \"]);\r",
									"})\r",
									"\r",
									"// set user id as an env varialble to use it in edit and delete end-points\r",
									"pm.collectionVariables.set(\"userId\", myResponse.id);\r",
									"pm.collectionVariables.set(\"firstName\", myResponse.firstName);\r",
									"pm.collectionVariables.set(\"lastName\", myResponse.lastName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 100,\r\n  \"idBook\": 100,\r\n  \"firstName\": \"jj\",\r\n  \"lastName\": \"oo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/v1/Authors"
					},
					"response": []
				},
				{
					"name": "AuthorsBook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check that the response should be 200 OK\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
									"});\r",
									"\r",
									"//check for Searching with valid idBook should return relative data in response body.\r",
									"\r",
									"pm.collectionVariables.set(\"book_id\", 80);\r",
									"let bookId = pm.collectionVariables.get(\"book_id\");\r",
									"pm.test(\"check that the user can search for a valid idBook and the rturned data should be relative in response body.\",function(){\r",
									"  pm.expect(pm.response.json()[0].idBook).to.equal(bookId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/api/v1/Authors/authors/books/{{book_id}}"
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be 200 OK\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
									"});\r",
									"\r",
									"// Check that Author's data is updated successfully.\r",
									"let firstNAme = pm.collectionVariables.get(\"firstName\");\r",
									"let lastNAme = pm.collectionVariables.get(\"lastName\");\r",
									"let myResponse = pm.response.json();\r",
									"pm.test(\"Author's data is updated successfully.\",function(){\r",
									"    pm.expect(myResponse.firstName).to.not.equal(firstNAme);\r",
									"    pm.expect(myResponse.firstName).to.not.equal(lastNAme);\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\":{{userId}},\r\n  \"idBook\": 0,\r\n  \"firstName\": \"Mahmoud\",\r\n  \"lastName\": \"Emad\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/api/v1/Authors/{{userId}}"
					},
					"response": []
				},
				{
					"name": "Get Single User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be 200 OK\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
									"});\r",
									"\r",
									"//check that The author's data is changed in GET request.\r",
									"// by validating on the sent user id is equal to the user id that returns from the response \r",
									"\r",
									"let myResponse = pm.response.json();\r",
									"let userId = pm.collectionVariables.get(\"userId\");\r",
									"pm.test(\"The author's data is changed in GET request.\",function(){\r",
									"    pm.expect(myResponse.id).to.be.equal(userId)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{baseUrl}}/api/v1/Authors/{{userId}}"
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check that the response should be 200 OK\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"    pm.expect(pm.response.status).to.equal(\"OK\");\r",
									"});\r",
									"//check that the given item is deleted successfully by validating on the header by content-length \r",
									"pm.test(\"check that the Given user deleted successfully\",function(){\r",
									"    pm.expect(pm.response.headers.get(\"Content-Length\")).to.be.equal(\"0\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/api/v1/Authors/{{userId}}"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://fakerestapi.azurewebsites.net",
			"type": "string"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "firstName",
			"value": ""
		},
		{
			"key": "lastName",
			"value": ""
		},
		{
			"key": "book_id",
			"value": ""
		}
	]
}